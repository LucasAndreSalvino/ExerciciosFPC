package main

import "fmt"


func Merge(ldata []int, rdata []int) (result []int) {
    result = make([]int, len(ldata) + len(rdata))
    lidx, ridx := 0, 0

    for i:=0;i<cap(result);i++ {
        switch {
            case lidx >= len(ldata):
                result[i] = rdata[ridx]
                ridx++
            case ridx >= len(rdata):
                result[i] = ldata[lidx]
                lidx++
            case ldata[lidx] < rdata[ridx]:
                result[i] = ldata[lidx]
                lidx++
            default:
                result[i] = rdata[ridx]
                ridx++
        }
    }

    return
}
func MergeLevelZero(a []int) []int {

  if len(a) <= 1 {
    return a
  }
  
  left := make([]int, 0)
  right := make([]int, 0)
  m := len(a) / 2

  for i, x := range a {
    switch {
    case i < m:
      left = append(left, x)
    case i >= m:
      right = append(right, x)
    }
  }

  left = MergeLevelZero(left)
  right = MergeLevelZero(right)

  return Merge(left, right)
}



func parallelSort(data []int, r chan []int, level int) {
    if len(data) == 1 {
        r <- data
        return
    }
     middle := len(data)/2

     if level == 0 {
	
        r <- MergeLevelZero(data)
        return
    }
    leftChan := make(chan []int)
    rightChan := make(chan []int)
    

    go parallelSort(data[:middle], leftChan, level-1)
    go parallelSort(data[middle:], rightChan, level-1)

    ldata := <-leftChan
    rdata := <-rightChan

    close(leftChan)
    close(rightChan)
    r <- Merge(ldata, rdata)
    return
}

func main() {
    s := []int{22, 8, 3, 31, 4, 2, 42, 1, 16, 6, 11, 25, 9, 8, 10, 12, 18, 14, 7, 15}

    result := make(chan []int)
    go parallelSort(s, result, 0)

    r := <- result
    for _,v := range r {
        fmt.Println(v)
    }
    close(result)
}